[user]
  name = Matt Phillips
  email = code@mattman.dev
[color]
  status = auto
  diff = auto
  branch = auto
  interactive = auto
  ui = auto
[column]
#  ui = auto
[init]
	defaultBranch = main
[core]
  excludesfile = ~/.gitignore_global
  # autocrlf values: true -> always convert, false -> never convert, input -> convert on commit
  autocrlf = input
  editor = $EDITOR
  #fsmonitor = true
[credential]
  helper = osxkeychain
[fetch]
  # clobber branches that are no longer on the remote
  prune = true
[push]
  default = simple
[pull]
  # perform merge
  rebase = false
  # avoid unnecessary merge commits
  # rebase = true
[branch]
  sort = committerdate
#  autosetuprebase = always
[merge]
  # complain if fast-forward merge isn't an option
  ff = only
[log]
  follow = true
  #date = short
  #date = iso-local
  date = local
[format]
  #pretty = format:%C(yellow)%h%C(reset) %C(red)%ad%C(reset) %C(blue)%<(8,trunc)%ae%C(reset) %C(green)%s%C(reset)
[grep]
  extendRegexp = true
  lineNumber = true
[diff]
  tool = difftastic
[difftool]
  prompt = false
[difftool "difftastic"]
  cmd = difft "$LOCAL" "$REMOTE"
[pager]
  difftool = true
[advice]
  # quiet warnings when rebasing
  skippedCherryPicks = false
[rerere]
  # ReReRe - Reuse Recorded Resolution
	enabled = true
	autoUpdate = true
[alias]
  mainbranch = "!git remote show origin | sed -n '/HEAD branch/s/.*: //p'"
  pull-rebase = "!git pull origin $(git mainbranch) --rebase"
  pul = pull
  update-branch = "!git pull origin $(git rev-parse --abbrev-ref HEAD) --rebase"
  publish = push -u origin HEAD --force-with-lease
  pub = publish
  stat = status
  s = status -s -b
  st = status --short --branch
  shorty = status --short --branch
  rootdir = rev-parse --show-toplevel
  dif = diff
  diffc = diff --cached
  diffs = diff --stat
  diffcs = diff --cached --stat
  diffw = diff --word-diff
  diff-ls-files = diff --name-only

  # difftastic for fancier diffs
  dft = difftool
  log-diff = "!f() { GIT_EXTERNAL_DIFF=difft git log -p --ext-diff $@; }; f"

  comit = commit
  commmit = commit
  co = checkout
  co-date = "!f() { d=${1:-2020-01-01}; git checkout $(git rev-list -1 --before=$d HEAD); }; f"
  log-find = log --all --name-status --grep
  grep-group = "grep --break --heading --line-number"
  g = grep-group
  br = branch -a
  stish = stash --keep-index
  staash = stash --all
  parents = "rev-list --parents --topo-order HEAD"
  common-ancestor = merge-base
  oldest-ancestor = "!zsh -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -"
  first-commit = "log --max-parents=0 HEAD"
  first-commit-hash = "rev-list --max-parents=0 HEAD"
  last = log -1 HEAD
  # note: use '%x09' for <TAB>
  #logs = log --pretty=format:'%h%x09%ad%x09%an%x09%s' --date=short
  #logs = log --pretty=format:'%h %ad %an %s' --date=short
  logs = log --pretty=format:'%C(yellow)%h%C(reset) %C(red)%ad%C(reset) %C(blue)%<(8,trunc)%ae %C(green)%s%C(reset)' --date=short
  # show weekday
  logsw = log --pretty=format:'%C(yellow)%h%C(reset) %C(cyan)%ad%C(reset) %C(red)%<(8,trunc)%ae %C(green)%s%C(reset)' --date=format:'%Y-%m-%d %a'
  lol = log --oneline --graph --decorate --branches --all
  tree = log --graph --branches --decorate --pretty=oneline --all
  logd = log --format=format:'%C(yellow)commit %H%C(reset)%ncommit date: %cd\nauthor date: %ad%n%n%w(80,4,4)%s%n' --date=local
  logf = log --format=fuller --date=local
  log-details = log --format=fuller --stat
  #log-date = log --format='%h %aI %s'
  log-date = log --format='%C(yellow)%h%C(reset) %C(cyan)%aI%C(reset) %s'
  grog = log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'
  user-counts = shortlog -sne
  authors-remote = for-each-ref --sort=authordate --format='%(color:cyan)%(authordate:format:%m/%d/%Y %I:%M %p)%(align:25,left)%(color:yellow) %(authorname)%(end)%(color:reset)%(refname:strip=3)' refs/remotes
  # commit message
  log-msg = log --format=%B
  log-msg-latest = log --format=%B -n 1
  # commit file contents
  log-contents = log -p
  # show just files changed in revision
  log-ls-files = diff-tree --no-commit-id --name-only -r 
  history = log --follow
  rebase-keep-dates = rebase --committer-date-is-author-date
  # list most commonly changed files in repo
  code-changes = "!git log --format=format: --name-only | egrep -v '^$' | sort | uniq -c | sort -rg | head -10"
  syncupstreammain = "!git pull upstream main && git push origin main"
  syncupstreammaster = "!git pull upstream master && git push origin master"
  submodule-update = "!git submodule update --init --recursive"
  commend = commit --amend --no-edit
  files-untracked = ls-files -o --exclude-standard
  files-ignored = ls-files --others -i --exclude-standard
  files-modified = ls-files -m
  delete-merged = "!git branch -D $(git branch --merged | grep -v '^*')"
  current-branch = "rev-parse --abbrev-ref HEAD"
  url-origin = "!git remote get-url origin"
  gc-now = "gc --prune='0 days'"
  # SVN habits
  svn-stat = "!git --no-pager diff --name-status remotes/git-svn"
  svn-diff = diff remotes/git-svn
  fixup = commit --amend -C HEAD
  up = pull --rebase --autostash

