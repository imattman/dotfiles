" Mattman's vimrc
"
set nocompatible                      " Forget legacy vi

if has("autocmd")
  " remove all autocommands (safe for re-sourcing)
  autocmd!
endif

source ~/.vim/vimrc-plugins.vim       " load plugins, including colors first 
source ~/.vim/vimrc-colors.vim        " configure colors


""""""""""""""""""""""
"      Settings      "
""""""""""""""""""""""
if has('unix')
  if has('macunix')
    "set guifont=Monaco:h16
    "set guifont=Menlo:h16
    "set guifont=Inconsolata:h18
    set guifont=InconsolataNerdFontCompleteM-Regular:h18
  else
    set guifont=Inconsolata\ 18
    "set guifont=Hack\ NF\ 16
    "set guifont=FiraCode\ NF\ 16
  endif
elseif has('win32')
  set guifont=Inconsolata:h18
endif


filetype off                    " Reset filetype detection first ...
filetype plugin indent on       " ... and enable filetype detection
set ttyfast                     " Indicate fast terminal conn for faster redraw
set ttymouse=xterm2             " Indicate terminal type for mouse codes
set ttyscroll=3                 " Speedup scrolling
set scrolloff=1                 " Min number of lines to show beyond cursor
set laststatus=2                " Show status line always

set encoding=utf-8              " Set default encoding to UTF-8
set autoread                    " Automatically read changed files
set autoindent                  " Enabile Autoindent
set smartindent                 "
set backspace=indent,eol,start  " Makes backspace key more powerful.

set number                      " Display numbers in left column
set ruler                       " Display cursor position in status line
set cursorline                  " Highlight cursor
set nocursorcolumn              " Do not highlight column (speeds up highlighting)

"set textwidth=80                " abbrev 'tw'
"set textwidth=0
set formatoptions=cq            " abbrev 'fo', append 't' to wrap at textwidth
set wrap linebreak
"set colorcolumn=+1              " Show text wrap column
"set colorcolumn=80              " Show text wrap column

set visualbell                  " Use visual bell instead of audio
set noerrorbells                " No beeps
set t_vb=                       " Reset terminal code for visualbell for no flash
set lazyredraw                  " Wait to redraw

set noshowmode                  " Mode info handled by airline or lightline
set showcmd                     " Show me what I'm typing
set wildmenu                    " better commandline completion
set laststatus=2                " Always display the status line
set cmdheight=2                 " Set the command window height to 2 lines
set mouse=a                     " Enable use of the mouse for all modes

set confirm                     " Raise a dialog to confirm save when error occurs

syntax enable
syntax on

set listchars=tab:▸\ ,eol:¬    " Use the same symbols as TextMate for tabstops and EOLs
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab                   " Use 'retab' with noexpandtab and ts=4 to convert to tabs

"set list                        " Show tabs and new lines
set showmatch                   " Show matching brackets by flickering
"set nowrap

" Search
set hlsearch                    " Highlight found searches
set incsearch                   " Shows the match while typing
set ignorecase                  " case insensitive search ...
set smartcase                   " ...unless capital letters used

set noswapfile                  " Don't use swapfile
set nobackup                    " Don't create annoying backup files
set splitright                  " Vertical windows should be split to right
set splitbelow                  " Horizontal windows should split to bottom
set autowrite                   " Automatically save before :next, :make etc.
set hidden                      " Buffer should still exist if window is closed
set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats
set completeopt=menu,menuone    " Show popup menu, even if there is one entry
set pumheight=10                " Completion window max size

"set spell spelllang=en_us       " enable spell check globally
"setlocal spell spelllang=en_us  " enable spell check for current buffer
"set complete+=kspell            " enable word completion

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
"set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\ %{fugitive#statusline()}
set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)

" Enable to copy to clipboard for operations like yank, delete, change and put
" http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
if has('unnamedplus')
  set clipboard^=unnamed
  set clipboard^=unnamedplus
endif

"" This enables us to undo files even if you exit Vim.
"if has('persistent_undo')
"  set undofile
"  set undodir=~/.config/vim/tmp/undo//
"endif

if has("autocmd")
  " Enter automatically into the files directory
  autocmd BufEnter * silent! lcd %:p:h

  autocmd BufNewFile,BufRead *.md setfiletype markdown
  "autocmd FileType markdown setlocal spell spelllang=en_us
  autocmd FileType markdown setlocal tw=80 fo=cqt colorcolumn=+1

endif




""""""""""""""""""""""
"      Mappings      "
""""""""""""""""""""""
let mapleader = " "             " default leader key is \
"noremap \ ,

nnoremap Y y$                   " Act like D and C
inoremap jk <ESC>               " map 'jk' as easy alternate to ESC from insert mode

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F11>

" set local CWD to that of current buffer
nnoremap <Leader>cd  :lcd %:p:h<CR>

" next search
nnoremap <C-l> :nohl<CR><C-l>   " Map redraw screen to also turn off highlighting

" Shortcut to rapidly toggle `set list` and deselect search highlighting
"nnoremap <leader>l :nohl<CR>:set list!<CR>

" Visual linewise up and down by default (and use gj gk to go quicker)
noremap <Up> gk
noremap <Down> gj
noremap k gk
noremap j gj

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzz
nnoremap N Nzz

" Easy buffer switching
nnoremap <S-h> <cmd>bprev<CR>
nnoremap <S-l> <cmd>bnext<CR>

" Switch between the last two files
nnoremap <Leader><Leader> <C-^>

" Jump to next error with Ctrl-n and previous error with Ctrl-m. Close the
" quickfix window with <leader>a
nnoremap <C-q> :copen<CR>
nnoremap <C-n> :cnext<CR>
nnoremap <C-m> :cprevious<CR>
"nnoremap <leader>a :cclose<CR>

" Use shift-Tab to bypass expandtab
inoremap <S-Tab> <C-V><Tab>

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Easy move of visual selection
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" replace selected text w/out clobbering default register
" then paste in what is currently in default register
vnoremap <leader>p "_dP


" Split
noremap <leader>h :<C-u>split<CR>
noremap <leader>v :<C-u>vsplit<CR>

" easier window navigation
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h

" open alternate in vertical split (default is horizontal)
nnoremap <C-w><C-^> :vsplit #<CR>
nnoremap <C-w><C-6> :vsplit #<CR>
nnoremap <C-w>6 :vsplit #<CR>


" emacs habit
nnoremap <C-w>0 <C-w>o
"nnoremap <C-x>0 <C-w>o


nnoremap <Leader>+ :vertical resize +5<CR>
nnoremap <Leader>- :vertical resize -5<CR>
nnoremap <Leader>rp :resize 100<CR>

" Use netrw for file explorer
nnoremap <Leader>e <cmd>Lexplore 20<CR>


" fzf mappings
nnoremap <C-p> <cmd>GFiles<CR>
nnoremap <Leader>f <cmd>Files<CR>
nnoremap <Leader>b <cmd>Buffers<CR>

" set to true to find project root from cwd
"if executable('rg')
"  let g:rg_derive_root='true'
"endif



" ------------------------------------------------------------
" Plug in configuration loaded after main settings
"

" airline theme set above with colorscheme
let g:airline_enable_branch = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'


" ------------------------------------------------------------
" vim-test
" strategies: basic | make | neovim | vimterminal (vim8) | vimux
let test#strategy = "vimterminal"


" ------------------------------------------------------------
" Git
noremap <leader>ga :!git add .<CR>
"noremap <leader>gc :!git commit -m '<C-R>="'"<CR>
"noremap <leader>gsh :!git push<CR>
noremap <leader>gs :Gstatus<CR>
noremap <leader>gb :Gblame<CR>
noremap <leader>gd :Gvdiff<CR>
"noremap <leader>gr :Gremove<CR>


" ------------------------------------------------------------
" Additional configs

source ~/.vim/vimrc-golang.vim              " Go config

