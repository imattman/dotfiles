// Place your settings in this file to overwrite the default settings
{
  //  demos
  // "window.zoomLevel": 1,
  // "workbench.colorTheme": "Visual Studio Light",

  "window.zoomLevel": 0,
  // no colorTheme defaults to "Dark+"

  // "workbench.colorTheme": "Tomorrow Night Bright",
  // "workbench.colorTheme": "Nord",
  // "workbench.colorTheme": "Super One Dark",
  // "workbench.colorTheme": "Night Owl",
  // "workbench.colorTheme": "Dracula At Night",
  // "workbench.colorTheme": "Community Material Theme High Contrast",
  // "workbench.colorTheme": "Material Theme Ocean High Contrast",
  // "workbench.colorTheme": "Cobalt2",

  "workbench.iconTheme": "vscode-icons",
  // "workbench.iconTheme": "material-icon-theme",

  "editor.fontFamily": "Inconsolata, Menlo, Monaco, 'Courier New', monospace",
  "editor.fontWeight": "normal",
  "editor.fontSize": 16,
  // Use 0 to compute the lineHeight from the fontSize.
  "editor.lineHeight": 0,

  "terminal.integrated.fontSize": 18,
  "terminal.integrated.lineHeight": 0,

  "editor.cursorStyle": "line",
  "editor.smoothScrolling": true,
  "editor.cursorBlinking": "phase",
  "editor.cursorSmoothCaretAnimation": false,

  "editor.detectIndentation": true,
  "editor.insertSpaces": true,
  "editor.tabSize": 2,
  "editor.renderWhitespace": "selection",

  "editor.parameterHints.cycle": true,
  "editor.suggest.showTypeParameters": true,

  "files.insertFinalNewline": true,
  "files.trimTrailingWhitespace": true,

  // disable Welcome screen
  "workbench.startupEditor": "newUntitledFile",

  // default to JSON view for configuration
  "workbench.settings.editor": "json",
  "workbench.settings.useSplitJSON": true,
  // "workbench.settings.openDefaultSettings": false,

  // opening a file via command pallete actually opens it
  "workbench.editor.enablePreviewFromQuickOpen": false,

  // tabs are enough to indicate which files are open
  "explorer.openEditors.visible": 0,

  // show file path breadcrumbs upper area of editor
  "breadcrumbs.enabled": true,

  // "editor.showFoldingControls": "always",
  // "workbench.colorCustomizations": {
  //   "editorGutter.background": "#abcdef",
  // },

  "editor.minimap.enabled": true,
  "editor.minimap.renderCharacters": false,
  // "editor.minimap.maxColumn": 200,
  // "editor.minimap.showSlider": "always",

  // don't phone home to the corporate mothership
  "telemetry.enableCrashReporter": false,
  "telemetry.enableTelemetry": false,

  // bottom status bar
  "workbench.statusBar.visible": true,
  // "workbench.colorCustomizations": {
  //   "statusBar.background": "#555555",
  // },

  //
  // Vim settings
  //
  "vim.leader": ",",
  "vim.incsearch": true,
  "vim.hlsearch": true,
  "vim.easymotion": false,
  "vim.sneak": false,
  "vim.useSystemClipboard": true,
  "vim.useCtrlKeys": true,
  "vim.insertModeKeyBindings": [
      {
          "before": ["j","j"],
          "after": ["<Esc>"]
      }
  ],
  "vim.normalModeKeyBindingsNonRecursive": [
      {
          "before": ["<leader>","d"],
          "after": ["d", "d"]
      },
      {
          "before":["<leader>", "l"],
          "commands": [
              ":nohl"
          ]
      }
  ],

  "macros": {
    // comment line and move down, IntelliJ style
    "commentDown": [
        "editor.action.commentLine",
        "cursorDown"
    ]
  },

  //
  // Go settings
  //
  // Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true.
  "go.gopath": "/Users/mattman/workspace/go",

  // Specifies the GOROOT to use when no environment variable is set.
  "go.goroot": "/usr/local/Cellar/go/1.16.3/libexec",

  "go.useLanguageServer": true,
  "go.autocompleteUnimportedPackages": true,
  "go.useCodeSnippetsOnFunctionSuggest": true,

  // Pick 'godoc' or 'gogetdoc' to get documentation.
  "go.docsTool": "godoc",

  "[go]" : {
    "editor.tabSize": 2,
    "editor.insertSpaces": false,
  },

  // Python settings
  //"python.defaultInterpreterPath": "/usr/local/bin/python3",
  "python.formatting.provider": "autopep8", // black

  "[python]" : {
    "editor.tabSize": 4,
    "editor.insertSpaces": true,
    "editor.formatOnSave": true,
    "editor.renderWhitespace": "boundary",
    "editor.autoSurround": "languageDefined",
  },

  "[markdown]" : {
    "editor.tabSize": 2,
    "editor.formatOnSave": true,
    "editor.wordWrap": "on",
    "editor.renderWhitespace": "boundary",
    "editor.autoSurround": "languageDefined",
    "files.trimTrailingWhitespace": false,
    "editor.quickSuggestions": {
      "other": true,
      "comments": false,
      "strings": false
    },
  },

  // Code Runner extension
  "code-runner.saveFileBeforeRun": true,
  "code-runner.clearPreviousOutput": true,
  "code-runner.runInTerminal": false,

  // show exit code and execution time
  "code-runner.showExecutionMessage": true,

  "code-runner.executorMap": {
      "javascript": "node",
      "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
      "c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
      "php": "php",
      "python": "python3",
      "perl": "perl",
      "perl6": "perl6",
      "ruby": "ruby",
      "go": "go run",
      "lua": "lua",
      "groovy": "groovy",
      "powershell": "powershell -ExecutionPolicy ByPass -File",
      "bat": "cmd /c",
      "shellscript": "bash",
      "fsharp": "fsi",
      "csharp": "scriptcs",
      "vbscript": "cscript //Nologo",
      "typescript": "ts-node",
      "coffeescript": "coffee",
      "scala": "scala",
      "swift": "swift",
      "julia": "julia",
      "crystal": "crystal",
      "ocaml": "ocaml",
      "r": "Rscript",
      "applescript": "osascript",
      "clojure": "lein exec",
      "haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
      "rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
      "racket": "racket",
      "ahk": "autohotkey",
      "autoit": "autoit3",
      "dart": "dart",
      "pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
      "d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
      "haskell": "runhaskell",
      "nim": "nim compile --verbosity:0 --hints:off --run"
  },
}
