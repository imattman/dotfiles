#!/usr/bin/env python3
#
# a simple UUID formatter because `uuid` is picky

import argparse
import re
import sys

STD = re.compile(r'^[0-9-a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$')
INLINE = re.compile(r'^[0-9-a-fA-F]{32}$')


def match_wellformed(val):
    # example:  313cd324-d185-11ec-8db6-cb8698adff83
    if STD.match(val):
        return val.lower()

    return None


def match_inline(val):
    # example:  251F9A49373348BF823D4A9FC67703C8
    if INLINE.match(val):
        lc = val.lower()
        return f'{lc[0:8]}-{lc[8:12]}-{lc[12:16]}-{lc[16:20]}-{lc[20:]}'

    return None


def find_match(val):
    m = match_inline(val) # TODO: use wallrus operator
    if m:
        return m

    m = match_wellformed(val) # TODO: needs more wallrus
    if m:
        return m

    return f'unable to find match for {val}'


def process(val):
    val = val.strip()
    if not val:
        return

    print(find_match(val))


def main():
    parser = argparse.ArgumentParser(
    description='A command line tool for formatting UUIDs')
    parser.add_argument('uuids',  metavar='uuids', nargs='*')
    args = parser.parse_args()

    if args.uuids:
        for val in args.uuids:
            process(val)
    else:
        for line in sys.stdin:
            process(line)


if __name__ == '__main__':
    main()


