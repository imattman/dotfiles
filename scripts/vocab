#!/usr/bin/env bash

# fail early
set -euo pipefail

if [[ -n "${DEBUG:=}" ]]; then
  set -x
fi

VOCAB_DIR="${ZET_VOCAB:-$NOTES_ZETTELKASTEN/vocabulary}"
TEMPLATES_DIR="$HOME/.dotfiles/templates/zet"
TEMPLATE_FILE="$TEMPLATES_DIR/vocab.md"
#CONFIG_DIR="$JOURNAL_BASE/config"
#CONFIG_FILE="$CONFIG_DIR/jn.env"

VOCAB_EDITOR=${VOCAB_EDITOR:-${VISUAL:-${EDITOR:-}}}
VOCAB_VIEWER=${VOCAB_VIEWER:-cat}
EDITOR_OPTS=''

DATE_CMD="date"
UUID_CMD="uuid"

usage() {
  local THIS_SCRIPT="${0##*/}"

  cat<<-EOU
Usage: $THIS_SCRIPT [OPTIONS] [<term>]

A utility for searching and editing vocabulary notes within my 
zettelkasten repo.

COMMANDS

  show, <none>    default action; presents selection screen of term to view
  -e, edit        similar to 'show' but opens file for edit after selection
  -s, search      search vocabulary terms based on content
  -a, add <term>  adds new vocab file and opens for edit
  ls [-l]         list vocabulary terms / files

OPTIONS

  -l              list long format with full file path
  -h              show this message

EXAMPLES

  # these perform the same action
  # 'show' is the default behavior when no command is specified
  $THIS_SCRIPT show
  $THIS_SCRIPT

  # select file then open for edit
  $THIS_SCRIPT -e

  # list all vocab entry terms
  $THIS_SCRIPT ls

  # list all vocab entry files
  $THIS_SCRIPT ls -l

EOU
}


precheck() {
  if [[ $(uname -s | grep -i darwin) ]]; then
    DATE_CMD=gdate

    if [[ ! $(command -v gdate) ]]; then
      echo "'gdate' not found. Install gnu coreutils"
      echo "  brew install coreutils"
      exit 1
    fi
  fi

  if [[ ! -d "$VOCAB_DIR" ]]; then
    echo "Vocab directory not found: $VOCAB_DIR"
    exit 1
  fi

  if [[ ! $(command -v $VOCAB_EDITOR) ]]; then
    if [[ -z "$VOCAB_EDITOR" ]]; then
      echo "Either \$EDITOR or \$VISUAL must be set."
    else
      echo "$VOCAB_EDITOR editor not found.  Check \$VISUAL and \$EDITOR"
    fi
    exit 1
  fi

  if [[ ! $(command -v envsubst) ]]; then
    echo "'envsubst' command not found"
    echo 1
  fi

  if [[ ! $(command -v rg) ]]; then
    echo "'rg' (ripgrep) command not found"
    echo 1
  fi

  if [[ ! -d "$TEMPLATES_DIR" ]]; then
    echo "Templates directory not found; check $TEMPLATES_DIR and \$TEMPLATES"
    exit 1
  fi

  if [[ ! $(command -v $UUID_CMD) ]]; then
    echo "Warning: 'uuid' command not found"
  fi

  return 0
}

verify_template() {
  local tmpl="$1"
  local full_path

  # partial name may have been supplied
  for tfile in "$tmpl" "daily-${tmpl}" "daily-${tmpl}.md"; do
    full_path="$TEMPLATES_DIR/${tfile}"
    if [[ -f "$full_path" ]]; then
      #echo "Setting template to $full_path"
      TEMPLATE_FILE="$full_path"
      return
    fi
  done

  if [[ ! -f "$full_path" ]]; then
    echo "Template file not found: $tmpl"
    exit 1
  fi
}

term_to_filename() {
  local term="${1}"
  local ext="${2:-.md}"

  local fname

  # replace spaces with dash
  fname="${term// /-}"
  return "${fname}.${ext}"
}

filename_to_term() {
  local fname="${1}"
  local prefix="${2:-vocab-}"
  local ext="${3:-.md}"

  local term="$fname"

  # extract basename
  term="${term##*/}"

  # remove prefix
  term="${term#${prefix}}"

  # remove extension
  term="${term%${ext}}"

  # replace spaces with dash
  term="${term//-/ }"

  printf "$term"
}

list_terms() {
  local path_fmt="${1:-}"
  local query="${2:-}"

  for fpath in $(find $VOCAB_DIR -type f -name "vocab-*.md"); do
    if [[ -n $path_fmt ]]; then
      printf "%s\n" "$fpath"
    else
      printf "%s\n" "$(filename_to_term "$fpath")"
    fi
  done
}

list_fzf_cols() {
  for fpath in $(list_terms 'long' | sort); do
    term="$(filename_to_term "$fpath")"
    printf "%s,%s\n" "$fpath" "$term"
  done
}

select_term() {
  local query="${1:-}"
  local selection

  selection=$(list_fzf_cols | sort | fzf --layout=reverse \
    --delimiter=,  --with-nth=2  --query="$query" --select-1 \
    --preview 'cat {1}' --border \
    --color 'bg:#222222,preview-bg:#333333')

    echo "${selection%,*}"
}

search() {
  local query="${1:-}"
  local selection

  cd "$VOCAB_DIR" || return 1

  RG_PREFIX="rg --column --line-number --no-heading --color=always --sort=path --smart-case "

  INITIAL_QUERY="$query"
  selection=$(FZF_DEFAULT_COMMAND="$RG_PREFIX '$INITIAL_QUERY'" fzf \
    --bind "change:reload:$RG_PREFIX {q} || true" \
    --ansi --phony --query "$INITIAL_QUERY" \
    --delimiter=: --reverse \
    --preview 'nl {1}' --border  --color 'bg:#222222,preview-bg:#333333')

  echo "$VOCAB_DIR/${selection%%:*}"
}


setup_vars() {
  local day="$1"

  export DATE=$($DATE_CMD -d "$day" +%Y-%m-%d)
  export WEEKDAY=$($DATE_CMD -d "$day" +%A)
  export YEAR_DAY=$($DATE_CMD -d "$day" +%j) # 1..366
  export ISO_WEEK=$($DATE_CMD -d "$day" +%V)
  export ISO_YEAR=$($DATE_CMD -d "$day" +%G)
  export TODAY=$($DATE_CMD  +%Y-%m-%d)

  export UUID=''
  if [[ $(command -v $UUID_CMD) ]]; then
    export UUID="$($UUID_CMD -v 1)"
  fi
}


# header() {
#   local day="$1"
#   local template="${2:-$TEMPLATE_FILE}"
#   setup_vars "$day"
# 
#   #echo "Using template ${template}"
#   if [[ -f "$template" ]]; then
#     envsubst < "$template"
#   else
#     printf -- '---\ndate: "%s"\nweekday: "%s"\nhealth:\n  weight:\n    pounds: \n---\n\n' \
#       "$DATE" "$WEEKDAY"
#   fi
# }


# prepare() {
#   local jnfile="$1"
#   local isodate="$2"
# 
#   mkdir -p "$(dirname "$jnfile")"
# 
#   if [[ ! -f "$jnfile" ]]; then
#     header "$isodate" >> "$jnfile"
#   else
#     touch "$jnfile"
#   fi
# 
#   echo -n "$jnfile"
# }



cmd=''
term=''
long_fmt=''
do_edit=''
vocab_file=''

for arg in "$@"; do
  case "$arg" in
    show|view)
      cmd='show'
      ;;
    ls|list)
      cmd='list'
      ;;
    -a|add|new)
      cmd='add'
      ;;
    -e|edit)
      do_edit=true
      ;;
    -l)
      long_fmt=true
      ;;
    -s|search|find)
      cmd='search'
      ;;
    -t)
      shift
      templ="$1"
      verify_template "$tmpl"
      ;;
    -h|help)
      usage
      exit 0
      ;;
    *)
      term="$arg"
      ;;
  esac

  shift
done


precheck

# default to select and show
if [[ -z "$cmd" ]]; then
  cmd='show'
fi

# cat <<EOM
# cmd:      $cmd
# term:     $term
# long_fmt: $long_fmt
# do_edit:  $do_edit
# EOM


case "$cmd" in
  show)
    vocab_file="$(select_term "$term")"
    ;;
  list)
    list_terms "$long_fmt" "$term"
    ;;
  search)
    vocab_file="$(search "$term")"
    ;;
  add)
    vocab_file="$(prepare_add "$term")"
    ;;
esac


if [[ -n "$vocab_file" ]]; then
  if [[ -n "$do_edit" ]]; then
    exec $VOCAB_EDITOR $EDITOR_OPTS "$vocab_file"
  else
    exec $VOCAB_VIEWER "$vocab_file"
  fi
fi


