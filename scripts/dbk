#!/usr/bin/env bash
#
# A convenience script for editing daybook log entries

# fail early
set -euo pipefail

if [[ -n "${DEBUG:=}" ]]; then
  set -x
fi

#DBK_DIR="${NOTES_ZK/daybook}"
: ${DBK_DIR:=${NOTES_ZK}/daybook}
#DBK_ENTRY_FILE="${NOTES_DAYBOOK_FILE:-$DBK_DIR/daybook-log.md}"

: ${DBK_TEMPLATES_DIR:=$NOTES_ZK/templates}
: ${DBK_TEMPLATE_HEADER:=daybook-header.md}
: ${DBK_TEMPLATE_ENTRY:=daybook-entry.md}
: ${DBK_TEMPLATE_HEADER_PATH:=$DBK_TEMPLATES_DIR/$DBK_TEMPLATE_HEADER}
: ${DBK_TEMPLATE_ENTRY_PATH:=$DBK_TEMPLATES_DIR/$DBK_TEMPLATE_ENTRY}
: ${DBK_EDITOR:=${VISUAL:-${EDITOR:-}}}

DATE_CMD="date"
UUID_CMD="uuid"
DBK_EDITOR_OPTS=('-c normal G' '-c ?topic' '-c nohl' '-c normal $')

usage() {
  local THIS_SCRIPT="${0##*/}"

  cat<<EOU
Usage: $THIS_SCRIPT [OPTIONS] [date1 [date2 ...]]

A utility for managing daybook log entries.

Examples:

  # generate standard header with current date
  $THIS_SCRIPT

  # generate header with 'topic' and 'location' prefilled
  TOPIC='some topic' LOCATION='library' $THIS_SCRIPT

OPTIONS:
   -h:  Show this message

EOU
}

precheck() {
  if [[ $(uname -s | grep -i darwin) ]]; then
    DATE_CMD=gdate

    if [[ ! $(command -v gdate) ]]; then
      echo "'gdate' not found. Install gnu coreutils"
      echo "  brew install coreutils"
      exit 1
    fi
  fi

  if [[ ! -d "$DBK_DIR" ]]; then
    echo "Warning: daybook directory not found: $DBK_DIR"
  fi

  if [[ ! $(command -v $DBK_EDITOR) ]]; then
    if [[ -z "$DBK_EDITOR" ]]; then
      echo "Either \$EDITOR or \$VISUAL must be set."
    else
      echo "$DBK_EDITOR editor not found.  Check \$VISUAL and \$EDITOR"
    fi
    exit 1
  fi

  if [[ ! $(command -v envsubst) ]]; then
    echo "'envsubst' command not found"
    echo 1
  fi

  if [[ ! -d "$DBK_TEMPLATES_DIR" ]]; then
    echo "Templates directory not found; check $DBK_TEMPLATES_DIR"
    exit 1
  fi

  if [[ ! $(command -v $UUID_CMD) ]]; then
    echo "Warning: 'uuid' command not found"
  fi

  if [[ ! -f "$DBK_TEMPLATE_HEADER_PATH" ]]; then
    echo "Template header file not found: $DBK_TEMPLATE_HEADER_PATH"
    exit 1
  fi

  if [[ ! -f "$DBK_TEMPLATE_ENTRY_PATH" ]]; then
    echo "Template entry file not found: $DBK_TEMPLATE_ENTRY_PATH"
    exit 1
  fi

  return 0
}

isodate() {
  local day="${1:-today}"

  # strip possible ".md" extension
  day="${day%.md}"

  $DATE_CMD -d "$day" +%Y-%m-%d
}

date_path() {
  $DATE_CMD -d "$1" "+%Y"
}


setup_vars() {
  local day="$1"

  export DATE=$($DATE_CMD -d "$day" +%Y-%m-%d)
  export TIMESTAMP=$($DATE_CMD -d "$day" '+%Y-%m-%dT%H:%M:%S%z')
  export WEEKDAY=$($DATE_CMD -d "$day" +%A)
  export YEAR_DAY=$($DATE_CMD -d "$day" +%j) # 1..366
  export ISO_WEEK=$($DATE_CMD -d "$day" +%V)
  export ISO_YEAR=$($DATE_CMD -d "$day" +%G)
  export TODAY=$($DATE_CMD  +%Y-%m-%d)

  export UUID=''
  if [[ $(command -v $UUID_CMD) ]]; then
    export UUID="$($UUID_CMD -v 1)"
  fi
}

dbkfile() {
  local isodate="$1"
  local entry_dir="$(date_path "$isodate")"

  printf "$DBK_DIR/%s/%s-daybook.md" "$entry_dir" "$isodate"
}


process_template() {
  local template="$1"
  local day="$2"

  #echo "Using template ${template}"
  if [[ ! -f "$template" ]]; then
    echo "Error: template '$template' not found"
    exit 1
  fi

  envsubst < "$template"
}


prepare() {
  local dbkfile="$1"
  local isodate="$2"

  setup_vars "$isodate"

  if [[ ! -f "$dbkfile" ]]; then
    process_template "$DBK_TEMPLATE_HEADER_PATH" "$isodate" >> "$dbkfile"
  fi

  process_template "$DBK_TEMPLATE_ENTRY_PATH" "$isodate" >> "$dbkfile"

#  echo -n "$dbkfile"
}


do_prepare=true
do_edit=true
dbkfile=''

while getopts 'fhlp' OPTION
do
  case $OPTION in
    f)  dbkfile="$OPTARG"
        ;;
    l)  do_edit=false
        do_prepare=false
        ;;
    p)  do_prepare=true
        ;;
    h|?)
        usage
        exit 0
        ;;
  esac
done

shift $((OPTIND - 1))


precheck
days=("$@")
files=()

# default to 'today'
if [[ ${#days[@]} -eq 0 ]]; then
  days=('today')
fi

for day in "${days[@]}"; do
  isodate=$(isodate "$day")
  dbkfile=$(dbkfile "$isodate")
  if [[ $do_prepare == true ]]; then
    prepare "$dbkfile" "$isodate"
  elif [[ $do_edit != true ]]; then
    echo "$dbkfile"
  fi

  files+=("$dbkfile")
done


if [[ $do_edit == true ]]; then
  cd "$DBK_DIR"
  exec $DBK_EDITOR "${DBK_EDITOR_OPTS[@]}" "${files[@]}"
fi

